#!/usr/bin/python

from Tkinter import *
import sys, os

from CRABAPI.RawCommand import crabCommand

class Line:
    def __init__(self, frame, name, size):
        nRow = size % 25 + 1
        nCol = (size / 25)*6
        self.name = name
        self.label = Label(frame, text=name)
        self.label.grid(row=nRow, column=nCol, sticky=W)
        self.statLabel = Label(frame, text="?/?")
        self.statLabel.grid(row=nRow, column=nCol+1, sticky=E)
        self.statusBtn = Button(frame, text="status", command=self.status)
        self.statusBtn.grid(row=nRow, column=nCol+2, sticky=EW)
        self.getBtn = Button(frame, text="get", command=self.get, state=DISABLED)
        self.getBtn.grid(row=nRow, column=nCol+3, sticky=EW)
        self.resubmitBtn = Button(frame, text="resubmit", command=self.resubmit, state=DISABLED)
        self.resubmitBtn.grid(row=nRow, column=nCol+4, sticky=EW)
        self.finishBtn = Button(frame, text="finish", command=self.finish, state=DISABLED)
        self.finishBtn.grid(row=nRow, column=nCol+5, sticky=EW)

        self.status()

    def status(self):
        if not os.path.exists("%s/.requestcache" % self.name): return
        print "@ checking status", self.name
        res = crabCommand('status', dir = self.name)
        jobs = res['jobsPerStatus']

        nSuccess, nFail, nJobs = 0, 0, 0
        if 'finished' in jobs: nSuccess = jobs['finished']
        if 'failed'   in jobs: nFail    = jobs['failed']
        nJobs = len(res['jobList'])
        self.statLabel.configure(text="%d/%d/%d" % (nSuccess, nFail, nJobs))

        if nSuccess > 0:
            self.getBtn['state'] = 'normal'
        if nSuccess == nJobs:
            self.finishBtn['state'] = 'normal'
        if nFail > 0:
            self.resubmitBtn['state'] = 'normal'
        else:
            self.resubmitBtn['state'] = 'disabled'

        print "@ status(%s) done" % self.name

    def get(self):
        if not os.path.exists("%s/.requestcache" % self.name): return
        self.getBtn['state'] = "disabled"
        os.system("crab get %s" % self.name)
        self.getBtn.configure(text="get")
        self.status()
        print "@ get(%s) done" % self.name

    def resubmit(self):
        if not os.path.exists("%s/.requestcache" % self.name): return
        self.resubmitBtn['state'] = 'disabled'
        crabCommand('resubmit', dir=self.name)
        self.status()
        print "@ resubmit(%s) done" % self.name

    def finish(self):
        if not os.path.exists("%s/.requestcache" % self.name): return
        crabCommand('report', dir=self.name)
        os.system("mv %s done/" % self.name)
        self.statusBtn['state'] = 'disabled'
        self.resubmitBtn['state'] = 'disabled'
        self.getBtn['state'] = 'disabled'
        self.finishBtn['state'] = 'disabled'
        self.label.configure(fg='gray')
        self.statLabel.configure(fg='gray')
        print "@ finish(%s) done" % self.name

objs = []
def status_all():
    for obj in objs:
        obj.status()

def resubmit_all():
    for obj in objs:
        obj.resubmit()

if __name__ == '__main__':
    ## Build GUI
    if not os.path.exists("done"):
        os.mkdir("done")
    root = Tk()

    lFrame = Frame(root)
    size = 0
    for d in sorted(os.listdir(".")):
        if d[0] == '.': continue
        if not os.path.isdir(d): continue
        if ".requestcache" not in os.listdir(d): continue

        line = Line(lFrame, d, size)
        objs.append(line)
        size += 1
    lFrame.pack()

    dFrame = Frame(root)
    allStatusBtn = Button(dFrame, text="status_all", command=status_all)
    allResubmitBtn = Button(dFrame, text="resubmit_all", command=resubmit_all)
    allStatusBtn.pack(side=RIGHT)
    allResubmitBtn.pack(side=RIGHT)
    dFrame.pack()

    root.mainloop()

