#!/usr/bin/env python

import sys, os
import stat, shutil
from math import ceil
from datetime import datetime

def usage():
    print sys.argv[0], " : create pbs jobs"
    print "  Mandatory options :"
    print "   --jobName  NAME                  Name of job"
    print "   --fileList DATA_FILES            File list text file"
    print "   --maxFiles N                     Maximum number of files per job"
    print "   --cfg      CONFIG_FILE_cfg.py    Configuration file"
    print "  Optional :"
    print "   --queue QUEUE_NAME               Set the batch queue name"
    print "   -n                               Do not submit jobs to batch"
    print "   --transferDest OUTPUT_LOCATION   OUTPUT DIRECTORY (/store will be assumed to SE)"
    print "   -g                               Grid certificate is required"
    sys.exit()

# Parse arguments
if len(sys.argv) < 2: usage()
opts = {}
args = []
i = 0
while i < len(sys.argv)-1:
    i += 1
    arg = sys.argv[i]

    arg1, arg2 = None, None
    if len(arg) > 2 and arg[:2] == '--':
        if '=' in arg:
            arg1 = arg.split('=')[0]
            arg2 = '='.join(arg.split('=')[1:])
        elif i+1 < len(sys.argv):
            arg1 = arg
            arg2 = sys.argv[i+1]
            i += 1
        else:
            print "ERROR: Value must be followed after the option", arg
            sys.exit()
        opts[arg1] = arg2
    elif arg[0] == '-':
        opts[arg] = True
    else:
        args.append(arg)

## Mandatory options
if '--jobName' not in opts: usage()
#uniqueID = datetime.strftime(datetime.now(), "%Y%m%d-%H%M%S")
jobName = opts['--jobName']#+"-"+uniqueID
jobDir = os.path.abspath(jobName)
if '--fileList' not in opts: usage()
fileList = opts['--fileList']
if not os.path.exists(fileList):
    print "ERROR: Cannot find file list", fileList
    sys.exit()
if '--maxFiles' not in opts: usage()
maxFiles = int(opts['--maxFiles'])
if '--cfg' not in opts: usage()
cfgFileName = opts['--cfg']
if '_cfg.py' != cfgFileName[-min(7,len(cfgFileName)):]: usage()
if not os.path.exists(cfgFileName):
    print "ERROR: Cannot find config file", cfgFileName
    sys.exit()
if os.path.isdir(jobDir):
    print "ERROR: Output directory already exists."
    sys.exit()
doSubmit = ('-n' not in opts)
doGrid = ('-g' in opts)
if '--transferDest' in opts:
    transferDest = opts['--transferDest']
else:
    #transferDest = "/pnfs/user/%s/scratch/%s" % (os.environ["USER"], jobName)
    transferDest = jobDir
if '://' not in transferDest:
    transferDest = os.path.abspath(transferDest)
if '--queue' in opts:
    queue = opts['--queue']
else:
    queue = None

# Check necessary envvars
if 'CMSSW_VERSION' not in os.environ:
    print "ERROR: You have to set up CMSSW. Run cmsenv in your working directory."
    sys.exit()

# Check which job submitter to be used, check site dependency
command = None
doInPlaceRun = True
doFileTransfer = False
transferCmd = 'cp $i %s/' % transferDest
## Get hostName for site-dependent part of job submission
hostName = os.environ['HOSTNAME']
if 'lxplus' in hostName: # CERN lxplus
    if queue == None: queue = '8nh'
    command = 'bsub -q %s' % (queue)
    doInPlaceRun = False
    if '/store/' == transferDest[:8]:
        transferCmd = 'eos cp $i %s/' % transferDest
    else:
        transferCmd = 'cp $i %s/' % transferDest
    doFileTransfer = True
elif 'sscc.uos' in hostName: # UOS SSCC
    if queue == None: queue = 'batch'
    command = 'qsub -q %s -N' % (queue) 
elif 'ccp' in hostName: # KNU CCP AF
    if queue == None: queue = 'long'
    command = 'qsub -q %s -N' % (queue) 
elif 'sdfarm.kr' in hostName: # KISTI T3
    command = 'condor_submit submit.jds'
    doInPlaceRun = False
    if '/store/' == transferDest[:8]:
        transferDest = 'root://cms-xrdr.sdfarm.kr:1094///cms/data/xrd/%s' % transferDest

    if 'root://' in transferDest:
        transferCmd = 'xrdcp file://$i %s/$i' % transferDest
    else:
        transferCmd = 'cp $i %s/' % transferDest
    print "KISTI submission is not supported due to user policy change."
    print "Use local crab to submit your job."
    print 'Automatic job submission not available on this site.'
    doSubmit = False
else:
    print 'Automatic job submission not available on this site.'
    doSubmit = False

## Prepare working directory
print "@@ Preparing batch jobs in", jobName, "..."
os.makedirs(jobDir)
if transferDest != jobDir and transferCmd == 'cp':
    print "@@ Preparing output scratch directory in", transferDest, "..."
    os.makedirs(transferDest)

## Collect root files
files = []
for f in open(fileList).readlines():
    f = f.strip()
    f = f.strip('\',"')
    if len(f) < 5: continue
    if '#' == f[0] or '.root' != f[-5:]: continue
    files.append(f)
nFiles = len(files)
if nFiles == 0:
    print "ERROR: Empty dataset."
    sys.exit()
## Sort files by its key "i", filename_[i]_[j]_hash.root
#files.sort(key=lambda f: int(f.split('/')[-1].split('_')[1]))

## Load cfg file
print "@@ Loading python cfg..."
sys.path.append('.')
cout = sys.stdout
sys.stdout = open("%s/log.txt" % jobDir, "w")
process = __import__('.'.join(cfgFileName.split('.')[:-1])).process
process.maxEvents.input = -1
sys.stdout = cout

## Memorise to modify output file names
print "@@ Setting output modules..."
outFileModes = {}
if hasattr(process, 'TFileService'):
    outFileModes['TFileService'] = process.TFileService.fileName.value()

for modName in process.outputModules_():
    outFileModes[modName] = getattr(process, modName).fileName.value()

## Split files into jobs and write python cfg
print "@@ Splitting jobs..."
nSection = int(ceil(1.0*nFiles/maxFiles))
for section in range(nSection):
    begin = section*maxFiles
    end = min(begin+maxFiles, nFiles)

    process.source.fileNames = files[begin:end]
    for modName in outFileModes:
        getattr(process, modName).fileName = "%s_%03d.root" % (outFileModes[modName][:-5], section)

    cfgFileName = "%s/job_%03d_cfg.py" % (jobDir, section)
    open(cfgFileName, "w").write(process.dumpPython())

## Checking voms proxy
if doGrid:
    print "@@ Checking grid certificate to access files..."
    if os.system("voms-proxy-info -exists --hours 8") != 0:
        os.system("voms-proxy-init -voms cms --valid 144:00")
    uid = os.getuid()
    shutil.copy2("/tmp/x509up_u%d" % uid, "%s/x509up_u%d" % (jobDir, uid))

## Write run script
print "@@ Writing run script..."
runFileName = "%s/run.sh" % jobDir
fout = open(runFileName, "w")
print>>fout, """#!/bin/bash
if [ _$PBS_ARRAYID != '_' ]; then
    ## FIXME: printf can introduce bug... please check
    SECTION=`printf %%03d $PBS_ARRAYID`
elif [ _$SECTION == '_' ]; then
    SECTION=`printf %%03d $1`
fi
export CMS_PATH=%s
source $CMS_PATH/cmsset_default.sh
cd %s
eval `scram runtime -sh`""" % (os.environ["CMS_PATH"], os.environ["CMSSW_BASE"])
if doGrid:
    print>>fout, "cp -f %s/x509up_u%d /tmp/" % (jobDir,uid)
print>>fout, "echo BEGIN `date` cmsRun job_${SECTION}_cfg.py >> %s/submit.log" % jobDir
if doInPlaceRun:
    print>>fout, """
cd %s
time cmsRun job_${SECTION}_cfg.py &> job_${SECTION}.log
""" % jobDir
else:
    print>>fout, """cd -
cp %s/job_${SECTION}_cfg.py ./
time cmsRun job_${SECTION}_cfg.py
""" % jobDir
print>>fout, "EXITCODE=$?"
if doFileTransfer:
    print>>fout, """
for i in *.root *.aida *.yoda; do
    %s
done
""" % (transferCmd)
print>>fout, """
if [ $EXITCODE == 0 ]; then
    echo ENDED `date` cmsRun job_${SECTION}_cfg.py >> %s/submit.log
else
    rm -f core.*
    echo TERMINATED_$EXITCODE `date` cmsRun job_${SECTION}_cfg.py >> %s/submit.log
fi""" % (jobDir, jobDir)
fout = None
os.chmod(runFileName, 0755)

fout = open("%s/submit.log" % jobDir, "w")
print>>fout, "SUBMIT STARTED", jobName
fout = None
os.chmod("%s/submit.log" % jobDir, 0666)

print "@@ Writing submit script..."
submitFileName = "%s/submit.sh" % jobDir
fout = open(submitFileName, "w")
print>>fout, "#!/bin/bash"
if 'bsub' == command.split()[0]:
    for section in range(nSection):
        print>>fout, "%s -J %s.%d -oo %s/job_%03d.log run.sh %03d" % (command, jobName, section, jobDir, section, section)
elif 'qsub' == command.split()[0]:
    for section in range(nSection):
        print>>fout, "%s %s_%d -d `pwd` run.sh -vSECTION=%03d" % (command, jobName, section, section)
elif 'condor_submit' == command.split()[0]:
    # Condor jobs
    jdlOut = open("%s/submit.jds" % jobDir, "w")
    print>>jdlOut, """# Job description file for condor job %s
executable = run.sh
universe   = vanilla
arguments  = $(Process)
log = condor.log

getenv     = True
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
output = job_$(Process).log
error = job_$(Process).err

queue %d""" % (jobName, nSection)
    jdlOut = None

    print>>fout, command
fout = None
os.chmod(submitFileName, 0755)
if doSubmit:
    print "@@ Submitting jobs..."
    if 'uos.ac.kr' in hostName:
        os.system("ssh uosaf0008 'cd %s;./submit.sh'" % jobDir)
    else:
        os.system("cd %s;./submit.sh" % jobDir)
else:
    print "@@ Jobs are prepared. You can submit jobs with following command:"
    print "cd %s;./submit.sh" % (jobDir)

print "@@ Done."
