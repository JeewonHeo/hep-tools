#!/usr/bin/env python

import sys, os
if '-h' in sys.argv or len(sys.argv) < 3:
    print "exportTnP : Export fit results root file from TagAndProbe analyzer to plain root file"
    print "Usage : exportTnP INPUTFILE.root OUTPUTFILE.root"
    print "Options :"
    print "   -h : Print help message"
    sys.exit()

inputFile = sys.argv[1]
outputFile = sys.argv[2]

from array import *
from copy import deepcopy
from math import *

sys.argv.append("-b")
from ROOT import *

cached = []
def getEff(effDS):
    if effDS == None: return None, []
    if type(effDS) != RooDataSet: return None, []

    binning = {}
    effData = RooArgList(effDS.get(0))
    for i in range(effData.getSize()):
        var = effData[i]
        varName = var.GetName()
        if varName == 'efficiency': continue
        rBins = var.getBinning()
        bins = [rBins.binLow(i) for i in range(rBins.numBins())]
        bins.append(rBins.binHigh(rBins.numBins()-1))
        binning[varName] = array('d', bins)

    effs = []
    for i in range(effDS.numEntries()):
        effData = RooArgList(effDS.get(i))
        effVal, binInfos = None, {}
        for j in range(effData.getSize()):
            var = effData[j]
            varName = var.GetName()
            if varName == 'efficiency':
                effVal = (var.getVal(), abs(var.getErrorLo()), var.getErrorHi())
            else:
                bins = binning[varName]
                binCenter = var.getVal()
                for k in range(len(bins)):
                    if bins[k] <= binCenter < bins[k+1]:
                        binNumber = k
                        break
                binInfos[varName] = (binNumber, binCenter)
        if effVal == None or len(binInfos) == 0: continue
        effs.append((effVal, binInfos))
    
    return effs, binning

## Load datasets and export to simpler form
def exportFitData(fin, fout):
    gROOT.cd()
    c = TCanvas("c%d" % len(cached), "c%d" % len(cached), 500, 500)
    h = TH1F("h%d" % len(cached), "h%d;Log(EDM);Entries" % len(cached), 100, -10, 10)
    cached.extend([c, h])
    
    for modName in [x.GetName() for x in fin.GetListOfKeys()]:
        modDir = fin.GetDirectory(modName)
        if modDir == None: continue
        
        modDirOut = fout.mkdir(modName)
        
        for varName in [x.GetName() for x in modDir.GetListOfKeys()]:
            varDir = modDir.GetDirectory(varName)
            if varDir == None: continue
            varDirOut = modDirOut.mkdir(varName)
            
            ## Load efficiency values
            if varDir.Get("fit_eff") != None:
                effs, binning = getEff(varDir.Get("fit_eff"))
            else:
                effs, binning = getEff(varDir.Get("cnt_eff"))
            if effs == None: continue
            
            ## Load frame
            hFrame, hEfficiency = None, None
            plotDir = varDir.GetDirectory("cnt_eff_plots")
            if plotDir == None: continue
            for cName in [x.GetName() for x in plotDir.GetListOfKeys()]:
                if '_PLOT' != cName[-5:]: continue
                c = plotDir.Get(cName)
                if not c.IsA().InheritsFrom("TCanvas"): continue
                
                ## Load 2D plot
                tmpFrame = c.FindObject(cName)
                if tmpFrame != None:
                    hFrame = tmpFrame.Clone()
                    hEfficiency = tmpFrame.Clone()
                    #break
                    continue
                ## Load 1D plot. Set binning information from the cnt_eff data
                tmpFrame = c.FindObject("frame")
                if tmpFrame != None:
                    hFrame = tmpFrame
                    bins = binning[binning.keys()[0]]
                    hFrame.SetBins(len(bins)-1, bins)
                    hEfficiency = TGraphAsymmErrors()
                    for i in range(len(bins)-1):
                        binW = (bins[i+1]-bins[i])/2
                        binCenter = (bins[i+1]+bins[i])/2
                        hEfficiency.SetPoint(i, binCenter, -1)
                        hEfficiency.SetPointError(i, binW/2, binW/2, 0, 0)
                    for eff in effs:
                        effVal, binInfos = eff
                        y, eyLo, eyHi = effVal
                        x = binInfos[binInfos.keys()[0]][1]
                        i = hFrame.FindBin(x)-1
                        exLo, exHi = abs(bins[i]-x), abs(bins[i+1]-x)
                        hEfficiency.SetPoint(i, x, y)
                        hEfficiency.SetPointError(i, exLo, exHi, eyLo, eyHi)
                    break

                print "Load Frame: Should not reach here."
                print cName
            if hFrame == None: continue

            varDirOut.cd()
            hFrame.Reset()
            hFrame.SetName("hFrame")
            hFrame.Write()
            hEfficiency.SetName("hEfficiency")
            hEfficiency.Write()

            ## Load mass distributions and fit curves
            for binName in [x.GetName() for x in varDir.GetListOfKeys()]:
                if '_bin' not in binName: continue
                binDir = varDir.GetDirectory(binName)
                if binDir == None: continue

                binInfoStrs = binName.split('__')[:-1]
                binInfos = []
                for binInfo in [x.split('_bin') for x in binInfoStrs]:
                    binInfos.append((binInfo[0], int(binInfo[1])))

                hDataPsss, hDataFail = None, None
                pdfs = []
                c = binDir.Get("fit_canvas")
                if c == None:
                    hasFit = False
                    c = binDir.Get("distributions_canvas")
                    if c == None: continue
                    c1 = c.FindObject("distributions_canvas_1")
                    c2 = c.FindObject("distributions_canvas_2")
                else:   
                    hasFit = True
                    c1 = c.FindObject("fit_canvas_1")
                    c2 = c.FindObject("fit_canvas_2")
                    fitResult = binDir.Get("fitresults")
                    edm = fitResult.edm()
                    if edm > 1: print "Bin with large EDM = %g, %s" % (edm, binName)
            
                    h.Fill(max(-10+1e-9, min(10-1e-9, log(edm))))
            
                for obj in c1.GetListOfPrimitives():
                    if 'pdf' in obj.GetName(): pdfs.append(obj.Clone())
                for obj in c2.GetListOfPrimitives():
                    if 'pdf' in obj.GetName(): pdfs.append(obj.Clone())
                
                binDirOut = varDirOut.mkdir(binName)
                binDirOut.cd()
                hDataPass = c1.FindObject("h_data")
                hDataFail = c2.FindObject("h_data")
                if hDataPass == None: hDataPass = c1.FindObject("h_data_binned")
                if hDataFail == None: hDataFail = c2.FindObject("h_data_binned")
                hDataPass.SetName("h_data_pass")
                hDataFail.SetName("h_data_fail")
                hDataPass.Write()
                hDataFail.Write()
                for pdf in pdfs: pdf.Write()
    h.Draw()
                
exportFitData(TFile(inputFile), TFile(outputFile, "RECREATE"))
