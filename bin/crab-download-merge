#!/usr/bin/env python

import sys, os
import re
from ConfigParser import ConfigParser

if len(sys.argv) < 2:
    print "crab-download-merge: Download output root files in the SE and merge"
    print "    Usage : crab-download-merge CRAB_WORKDIR"
    sys.exit()
sample = sys.argv[1]

if not os.path.isdir(sample):
    print "No such directory,", sample
    sys.exit()

## Analyze log file and list up file list
print "==== Analyzing crab log files ===="
downloadQueue = []
outPath = os.path.join(sample, 'unmerged')
if not os.path.exists(outPath):
    os.makedirs(outPath)
resPath = os.path.join(sample, 'res')
for logFileName in os.listdir(resPath):
    if not re.match('CMSSW_.*\.stdout', logFileName): continue
    jobId = int(logFileName.split('.')[-2].split("_")[1])

    logFileStr = open(os.path.join(resPath, logFileName)).read()
    pfnStrs = re.findall("newPfn = .*\.root", logFileStr)
    if len(pfnStrs) == 0:
        print "No PFN in the log file %s. skip." % logFileName
        continue
    pfn = pfnStrs[0].strip().split()[-1]

    fileName = os.path.basename(pfn)
    fileInfoStrs = re.findall("-rw.*%s" % fileName, logFileStr)
    if len(fileInfoStrs) == 0:
        print "No file information in the log file %s. skip." % logFileName
    fileSize = int(fileInfoStrs[0].strip().split()[4])

    localFileName = os.path.join(outPath, fileName)
    if os.path.exists(localFileName):
        localFileSize = os.path.getsize(localFileName)
        if fileSize == localFileSize:
            print "File %s is already downloaded in %s. skip" % (fileName, outPath)
            continue

    downloadQueue.append( (jobId, pfn, fileSize) )
print "Analyzed crab log files."

## Start download
print "==== Starting download ===="
n = len(downloadQueue)
for i, fileInfo in enumerate(downloadQueue):
    #print "Downloading %s (%d/%d)\r" % (pfn, i+1, n),
    print "Downloading %s (%d/%d)\r" % (os.path.basename(pfn), i+1, n),
print "\nDownload done."

print "==== Merging files ===="
cfg = ConfigParser()
cfg.read('%s/share/crab.cfg' % sample)
outFileName = os.path.join(sample, cfg.get('CMSSW', 'output_file'))
allRootFiles = [os.path.join(outPath, x) for x in os.listdir(outPath) if '.root' in x]
os.system("hadd -f %s %s" % (outFileName, " ".join(allRootFiles)))
