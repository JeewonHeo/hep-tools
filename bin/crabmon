#!/usr/bin/python
###!/usr/bin/env python

from Tkinter import *
import sys, os

class Line:
    def __init__(self, frame, name):
        nRow = frame.grid_size()[1]
        self.name = name
        self.label = Label(frame, text=name)
        self.label.grid(row=nRow, column=0, sticky=W)
        self.statLabel = Label(frame, text="?/?")
        self.statLabel.grid(row=nRow, column=1, sticky=E)
        self.statusBtn = Button(frame, text="status", command=self.status)
        self.statusBtn.grid(row=nRow, column=2, sticky=EW)
        self.getBtn = Button(frame, text="get", command=self.get, state=DISABLED)
        self.getBtn.grid(row=nRow, column=3, sticky=EW)
        self.resubmitBtn = Button(frame, text="resubmit", command=self.resubmit, state=DISABLED)
        self.resubmitBtn.grid(row=nRow, column=4, sticky=EW)
        self.finishBtn = Button(frame, text="finish", command=self.finish, state=DISABLED)
        self.finishBtn.grid(row=nRow, column=5, sticky=EW)

        self.readLog(name)

    def status(self):
        os.system("crab -c %s -status" % self.name)
        self.readLog(self.name)
        print "@ status(%s) done" % self.name

    def get(self):
        self.getBtn['state'] = "disabled"
        os.system("crab -c %s -get" % self.name)
        self.getBtn.configure(text="get")
        self.status()
        self.readLog(self.name)
        print "@ get(%s) done" % self.name

    def resubmit(self):
        self.resubmitBtn['state'] = 'disabled'
        resubmitIndices = ",".join([str(i) for i in self.resubmitIndices])
        os.system("crab -c %s -resubmit %s" % (self.name, resubmitIndices))
        self.resubmitBtn.configure(text="resubmit")
        self.status()
        self.readLog(self.name)
        print "@ resubmit(%s) done" % self.name

    def finish(self):
        os.system("crab -c %s -report" % self.name)
        os.system("mv %s done/" % self.name)
        self.statusBtn['state'] = 'disabled'
        self.getBtn['state'] = 'disabled'
        self.finishBtn['state'] = 'disabled'
        self.label.configure(fg='gray')
        self.statLabel.configure(fg='gray')
        print "@ finish(%s) done" % self.name

    def readLog(self, name):
        if not os.path.exists("%s/log/crab.log" % name):
            os.system("crab -c %s -status" % self.name)
        lines = open("%s/log/crab.log" % self.name).readlines()
        nLines = len(lines)
        lineNum = nLines
        while lineNum > 0:
            lineNum -= 1
            line = lines[lineNum]
            if line[:2] == "ID": break
        if lineNum == 0:
            os.system("crab -c %s -status" % self.name)
            return self.readLog(name)
        indexRunning = []
        indexDone = []
        indexClear = []
        indexToResubmit = []
        nJobs = 0
        while lineNum < nLines:
            line = lines[lineNum].strip()
            lineNum += 1
            if len(line) == 0: break
            if not line[0].isdigit(): continue
            items = line.split()
            index, isEnd, status, action = items[:4]
            if not index.isdigit(): continue
            index = int(index)
            if status == "Running":
                indexRunning.append(index)
            elif status == "Done":
                indexDone.append(index)
            elif status == "Aborted":
                indexToResubmit.append(index)
            elif status == "Retrieved" and action == "Cleared":
                exeCode = int(items[4])
                if exeCode != 0:
                    indexToResubmit.append(index)
                else:
                    jobCode = int(items[5])
                    if jobCode == 0:
                        indexClear.append(index)
                    else:
                        indexToResubmit.append(index)
            nJobs += 1
        if len(indexToResubmit) > 0:
            print "@@ Indices to resubmit:"
            print indexToResubmit
            self.resubmitIndices = indexToResubmit
            self.resubmitBtn.configure(text="resubmit(%d)" % len(indexToResubmit))
            self.resubmitBtn['state'] = 'normal'

        self.statLabel.configure(text="%d/%d" % (len(indexClear), nJobs))
        if len(indexClear) == nJobs:
            self.finishBtn['state'] = 'normal'
        if len(indexDone) > 0:
            self.getBtn.configure(text="get(%d)" % len(indexDone))
            self.getBtn['state'] = 'normal'

crabDirs = []
for d in sorted(os.listdir(".")):
    if d[0] == '.': continue
    if not os.path.isdir(d): continue
    if "res" not in os.listdir(d): continue
    crabDirs.append(d)

## Build GUI
if not os.path.exists("done"):
    os.mkdir("done")
root = Tk()
objs = []
for d in crabDirs:
    line = Line(root, d)
    objs.append(line)
    
root.grid()

root.mainloop()
